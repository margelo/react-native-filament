diff --git a/libs/gltfio/include/gltfio/Animator.h b/libs/gltfio/include/gltfio/Animator.h
index 199555a40..9111df050 100644
--- a/libs/gltfio/include/gltfio/Animator.h
+++ b/libs/gltfio/include/gltfio/Animator.h
@@ -20,6 +20,8 @@
 #include <gltfio/FilamentAsset.h>
 #include <gltfio/FilamentInstance.h>
 
+#define HAS_FILAMENT_ANIMATOR_PATCH 1
+
 namespace filament::gltfio {
 
 struct FFilamentAsset;
@@ -97,6 +99,12 @@ public:
     // For internal use only.
     void addInstance(FFilamentInstance* instance);
 
+    // Public constructor for creating an animator with the animations from an asset
+    // and applying the animations to a different instance.
+    Animator(FilamentAsset *asset, FilamentInstance *instance);
+
+    ~Animator();
+
 private:
 
     /*! \cond PRIVATE */
@@ -106,7 +114,6 @@ private:
 
     // If "instance" is null, then this is the primary animator.
     Animator(FFilamentAsset const* asset, FFilamentInstance* instance);
-    ~Animator();
 
     Animator(const Animator& animator) = delete;
     Animator(Animator&& animator) = delete;
diff --git a/libs/gltfio/src/Animator.cpp b/libs/gltfio/src/Animator.cpp
index 6e53b705c..5866106b6 100644
--- a/libs/gltfio/src/Animator.cpp
+++ b/libs/gltfio/src/Animator.cpp
@@ -206,6 +206,10 @@ Animator::Animator(FFilamentAsset const* asset, FFilamentInstance* instance) {
 
     // Loop over the glTF animation definitions.
     mImpl->animations.resize(srcAsset->animations_count);
+    // Note: doesn't work, you can only resize the vector to a smaller size
+    // if (instance) {
+    //     instance->mNodeMap.resize(srcAsset->nodes_count);
+    // }
     for (cgltf_size i = 0, len = srcAsset->animations_count; i < len; ++i) {
         const cgltf_animation& srcAnim = srcAnims[i];
         Animation& dstAnim = mImpl->animations[i];
@@ -238,6 +242,9 @@ Animator::Animator(FFilamentAsset const* asset, FFilamentInstance* instance) {
     }
 }
 
+Animator::Animator(FilamentAsset *asset, FilamentInstance *instance) : Animator(downcast(asset), downcast(instance)) {
+}
+
 void Animator::applyCrossFade(size_t previousAnimIndex, float previousAnimTime, float alpha) {
     mImpl->stashCrossFade();
     applyAnimation(previousAnimIndex, previousAnimTime);
@@ -408,7 +415,11 @@ void AnimatorImpl::addChannels(const FixedCapacityVector<Entity>& nodeMap,
     const Sampler* samplers = dst.samplers.data();
     for (cgltf_size j = 0, nchans = srcAnim.channels_count; j < nchans; ++j) {
         const cgltf_animation_channel& srcChannel = srcChannels[j];
-        Entity targetEntity = nodeMap[srcChannel.target_node - nodes];
+        long position = srcChannel.target_node - nodes;
+        Entity targetEntity;
+        if (UTILS_LIKELY(position < nodeMap.size())) { // avoid assert error on debug
+            targetEntity = nodeMap[position];
+        }
         if (UTILS_UNLIKELY(!targetEntity)) {
             if (GLTFIO_VERBOSE) {
                 slog.w << "No scene root contains node ";
